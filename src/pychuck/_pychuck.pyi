import numpy as np

class ChucK:
    def __init__(self) -> None: ...
    def init(self) -> bool: ...
    def start(self) -> bool: ...
    def shutdown(self) -> None: ...
    def stop(self) -> None: ...
    def set_param(self, name: str, value: int) -> int: ...
    def set_param_float(self, name: str, value: float) -> int: ...
    def set_param_string(self, name: str, value: str) -> int: ...
    def set_param_string_list(self, name: str, value: list[str]) -> int: ...
    def get_param_int(self, name: str) -> int: ...
    def get_param_float(self, name: str) -> float: ...
    def get_param_string(self, name: str) -> str: ...
    def get_param_string_list(self, name: str) -> list[str]: ...
    def compile_code(self, code: str, args: str = "", count: int = 1, immediate: bool = False, filepath: str = "") -> tuple[bool, list[int]]: ...
    def compile_file(self, path: str, args: str = "", count: int = 1, immediate: bool = False) -> tuple[bool, list[int]]: ...
    def run(self, input: "np.ndarray", output: "np.ndarray", num_frames: int) -> None: ...
    def start_audio(self) -> None: ...
    def stop_audio(self) -> None: ...
    def shutdown_audio(self) -> None: ...
    def get_shreds(self) -> list[int]: ...
    def remove_shred(self, shred_id: int) -> bool: ...
    def remove_all_shreds(self) -> None: ..
    def replace_code(self, shred_id: int, code: str, args: str = "", immediate: bool = False,filepath: str = "") -> bool: ...
    def signal(self, name: str, value: int = 0) -> None: ...
    def broadcast(self, name: str, value: int = 0) -> None: ...
    def get_log_level(self) -> int: ...
    def set_log_level(level: int) -> None: ...
    def is_init(self) -> int: ...
    def global_cleanup() -> None: ...
    def num_vms() -> int: ...
    def int_size() -> int: ...
    def version() -> str: ...